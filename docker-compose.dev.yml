version: "3"

services:
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - 9200:9200
    volumes:
      - ./data/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - node.name=elastic
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - reconcile-backend

  kibana:
    depends_on:
      elastic:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - 5601:5601 
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elastic:${ES_PORT_EXPOSED}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
          "curl -s http://localhost:9200",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - reconcile-backend

  reconcile:
    depends_on:
      elastic:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    command: npm run dev
    ports:
      - ${APP_PORT_EXPOSED}:${APP_PORT}
    volumes:
      - .env:/app/.env
      - ./src:/app/src
    networks:
      - reconcile-backend

volumes:
  kibanadata:
    driver: local

networks:
  reconcile-backend:
    name: reconcile-backend
    external: true
